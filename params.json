{"name":"Vitra","tagline":"Vim client for Trac","google":"","note":"Don't delete this file! It's used internally to help with page regeneration.","body":"# `Vitra` - Trac UI for ViM\r\n\r\n[`Vitra`][vitra] is a [Trac][Trac] client UI for the wonderful universal editor\r\n[Vim][Vim]. It talks to a trac server via XML-RPC.  It provides a fancy UI for\r\nboth wiki and tickets. A paginated list of tickets window, full ticket detail\r\nwindow along with attachment window makes a great UI for ticket manipulation.\r\nThe wiki UI combines the list of wiki pages, edit window with the content of\r\nthe wiki and a preview window. It also has timeline, search and changeset\r\nwindows.\r\n\r\n# Screenshots\r\n\r\nTicket UI\r\n\r\n![django tickets][djtkt]\r\n\r\nWiki UI\r\n\r\n![django wiki][djwiki]\r\n\r\nOther windows\r\n\r\n![localdj windows][otherwins]\r\n\r\n# Requirements\r\n\r\n`Vitra` requires Vim 7.3+ to be compiled with python 2.6+. [`Align`][Align] and\r\n[`TracWiki`][TWk] are two (optional) vim plugins that makes `Vitra` more\r\nbeautiful. Also the trac server should be 0.12+, as it uses the action command\r\nfor the workflow rather than just setting resolution on a ticket manually.\r\n\r\n# Installation\r\n\r\nThe preferred way to install `Vitra` is using [`Vundle`][Vundle] or\r\n[`Pathogen`][Pathogen].\r\n\r\n## Vundle\r\n\r\nAdd the following line to your __.vimrc__\r\n\r\n    Bundle \"nsmgr8/vitra\"\r\n\r\nRun __:BundleInstall__ in your vim command line.\r\n\r\n## Pathogen\r\n\r\nTo install in a pathogen managed plugins environment follow the steps as\r\n\r\n    $ cd ~./vim/bundle\r\n    $ git clone git://github.com/nsmgr8/vitra\r\n\r\nThen restart your vim.\r\n\r\n## Manual\r\n\r\nTo install `Vitra` manually in your local vim runtime path, do the following:\r\n\r\n    $ git clone git://github.com/nsmgr8/vitra\r\n    $ cp -R vitra/* ~/.vim/\r\n\r\nThen restart vim and build the help tags via the vim command line\r\n\r\n    :helptags ~/.vim/doc\r\n\r\n# Settings\r\n\r\nThe minimum setting requirement is to define the trac server. One or more trac\r\nserver(s) can be defined for use. To add a trac server define the global\r\ndictionary of servers _g:tracServerList_ in your __.vimrc__. Following is an\r\nexample of django trac server:\r\n\r\n    let g:tracServerList = {}\r\n    let g:tracServerList['djangoproject'] = {\r\n        \\ 'scheme': 'https',\r\n        \\ 'auth': 'USERNAME:PASSWORD',\r\n        \\ 'server': 'code.djangoproject.com',\r\n        \\ 'rpc_path': '/login/xmlrpc'\r\n        \\ 'auth_type': 'basic',\r\n        \\ }\r\n\r\nBy default, _scheme_ and *rpc_path* have values _http_ and _/login/rpc_.\r\n\r\nIf you define more than one trac server, you can also choose a default server\r\nthat will be selected when a vim session starts. To define the default server\r\nset the _g:tracDefaultServer_ in your .vimrc to the server key of it. e.g.,\r\n\r\n    let g:tracDefaultServer = 'djangoproject'\r\n\r\nIt is also possible to change the trac server in the running vim session. Use\r\n__TracServer__ command to change the trac server to use. It can offer tab\r\ncompletion for available servers that are defined in _g:tracServerList_. Note\r\nthat, this does not set the server to be default for next sessions.\r\n\r\n`Vitra` supports __Basic HTTP__, __Digest HTTP__ and __Kerberos__\r\nauthentication.\r\n\r\n# UI\r\n\r\nAfter the settings, one can open the wiki or ticket interface by __TWOpen__ or\r\n__TTOpen__ command respectively. Both commands can also optionally take a wiki\r\npage name or ticket number to open. If the requested wiki page does not exist,\r\nthe wiki edit window will offer the page to be created. In case of non-existent\r\nticket number, it will show an error in the ticket detail window.\r\n\r\n## Ticket UI\r\n\r\nThe ticket UI consists of four windows, viz., Listing, Detail, Edit and\r\nAttachment windows. The listing window is a paginated list of tickets. One can\r\npaginate through the list via __TTNextPage__ or __TTPreviousPage__ commands.\r\nThere are also two handy __TTFirstPage__ and __TTLastPage__ commands which\r\nlists the first and last page of the ticket lists. One can open a ticket from\r\nthe listing just by pressing `ENTER` or double-clicking on a line.\r\n\r\nA number of __TTFilter*Attr*__, __TTIgnore*Attr*__ commands will be available\r\nto filter the list of tickets by attributes. __TTOrderBy__ and __TTGroupBy__\r\nare also available for sorting the list on ticket attributes, which also have\r\ntab completion values for the ticket attribute keys. Filters can be cleared\r\nindividually by __TTClearFilter__ or completely by __TTClearAllFilters__.\r\n\r\nThe detail window shows the content of the ticket along with changelog. This is\r\na read only buffer, that is this content is not editable. It lists the current\r\nvalues of all ticket attributes, description and the conversation with all the\r\nhistory of attribute changes.\r\n\r\nThe edit window is an empty writable buffer, where one can create/update a\r\nticket. To create a new ticket enter the ticket description in this window and\r\nrun the command __TTCreate__ following the ticket summary. e.g., enter the\r\nfollowing in the edit window\r\n\r\n    Here is the ticket description.\r\n\r\nAnd run the following command\r\n\r\n    :TTCreate Summary of the ticket\r\n\r\nThis will create the ticket on the trac server and load it back in the detail\r\nwindow.\r\n\r\nTo update the summary, description or to add a comment, enter the text in the\r\nedit window and run __TTSetSummary__, __TTSetDescription__ or __TTAddComment__\r\nrespectively. There are also handy commands to load current summary or\r\ndescription in the edit window to update them. They are, obviously,\r\n__TTEditSummary__ and __TTEditDescription__.\r\n\r\nThere will also be a number of __TTUpdate*Attr*__ command available for\r\nupdating the respective attributes of the ticket. e.g., __TTUpdateType__ will\r\nupdate the type of the ticket. It will also offer tab completion to select the\r\ntype.\r\n\r\nOne can also attach a file to the ticket via __TAddAttachment__ command which\r\nalso offers tab completion on the file system to find your file to attach. The\r\nattachments are listed in the attachment window. Pressing `ENTER` will download\r\nthe file into current folder.\r\n\r\n`Vitra` supports the trac workflow actions. It loads a ticket with the actions\r\navailable. One can apply the action by __TTAction__, which again offers tab\r\ncompletion. The action will be verified before applying, so that invalid\r\nactions cannot be applied.\r\n\r\n`Vitra` also keeps the history of opened tickets in the current session.\r\nTherefore it is possible to move back/forward from the currently opened ticket.\r\nTo navigate the current history one should apply the command __TBack__ or\r\n__TForward__ to go back or forward in the history of opened tickets.\r\n\r\nTo close the ticket UI, run __TTClose__ command. One can preview an HTML of the\r\nticket edit window content in the default browser by __TPreview__.\r\n\r\n## Wiki UI\r\n\r\nWiki interface also consists of four windows, viz., Listing, Edit, Preview and\r\nAttachment windows. Listing window lists all available wiki pages. One can open\r\na wiki by pressing `ENTER` or double-clicking a line.\r\n\r\nThe main wiki window allows the wiki page to be edited. One can edit a wiki\r\npage here and run __TWSave__ to save the changes. To create a new wiki page,\r\nrun `TWOpen new_page_name`, enter the text into the wiki window and run\r\n`TWSave`.\r\n\r\nLike the ticket attachment window, wiki page also has a corresponding\r\nattachment window. Run __TAddAttachment__ similarly to add a file and press\r\n`ENTER` to retrieve the attachment.\r\n\r\nThe UI also provides a preview which shows a stripped out html output of the\r\ncurrent wiki page.\r\n\r\n__TBack__ and __TForward__ also traverses the history of opened wiki pages as\r\nwell.\r\n\r\n__TWClose__ can close the wiki UI. Also, __TWInfo__ can print useful\r\ninformation about the current page. One can locally preview the HTML of the\r\ncurrent wiki page content by __TPreview__.\r\n\r\n## Other windows\r\n\r\n * __TTimeline__ opens the timeline in a window and by pressing `ENTER` one can\r\n   open a ticket, wiki or changeset.\r\n * __TSearch__ command can search the trac and provide a window with the search\r\n   result where one can open a ticket, wiki or changeset by pressing `ENTER`.\r\n * __TChangeset__ command can open a diff view of a given changeset in\r\n   a window.\r\n * __TServer__ opens a buffer with a list of available servers. By pressing\r\n   `ENTER` one can switch server.\r\n\r\n# Options\r\n\r\nThe following options are available for `Vitra`:\r\n\r\n * _g:tracDefaultServer_:  ''\r\n   * Set your preferred trac server, if you have more than one defined in\r\n     _g:tracServerList_.\r\n * _g:tracDefaultComment_: 'Updated from Vitra'\r\n   * Default comment to use when saving changes to trac.\r\n * _g:tracTicketClause_: 'status!=closed'\r\n   * This provides a default filtering options for ticket listing.\r\n * _g:tracTicketGroup_: 'milestone'\r\n   * Set to your preferred attribute for listing tickets in groups.\r\n * _g:tracTicketOrder_: 'priority'\r\n   * Set to your preferred attribute for listing tickets in order.\r\n * _g:tracTicketStyle_: 'full'\r\n   * Unless set to 'full', the ticket listing window will appear in the ticket\r\n     UI. Also this will hide all other buffers other than the ticket UI.\r\n * _g:tracTicketFormat_: 1\r\n   * If set to 1, show formatted text in ticket detail window. Otherwise, show\r\n     the wiki markup content.\r\n * _g:tracWikiStyle_: 'full'\r\n   * If set to 'full', the wiki UI will hide all other buffers.\r\n * _g:tracWikiPreview_: 1\r\n   * If set to 1, the wiki UI will show a preview of the current page.\r\n * _g:tracWikiToC_: 1\r\n   * If set to 1, the wiki UI will show the list of available pages.\r\n * _g:tracHideTracWiki_: 1\r\n   * If set to 1, the list of wiki pages will not show the Trac's own pages.\r\n * _g:tracTimelineMax_: 50\r\n   * Number of maximum number of entries to get in the timeline.\r\n\r\n# Links\r\n\r\n * [Homepage][vitra]\r\n * [Vim scripts][vimscripts]\r\n * [Development][development]\r\n * [Issues/Bug Reports][issues]\r\n\r\n# Inspiration\r\n\r\nThis plugin is inspired by the the other trac vim integration plugin\r\n[`Trac.vim`][vimtrac] available for years.\r\n\r\n# License\r\n\r\nThe source code is licensed under MIT license. Please hack it to suit yourself.\r\n\r\n## The MIT License (MIT)\r\n\r\nCopyright (c) 2011 M. Nasimul Haque\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of\r\nthis software and associated documentation files (the \"Software\"), to deal in\r\nthe Software without restriction, including without limitation the rights to\r\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\nof the Software, and to permit persons to whom the Software is furnished to do\r\nso, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\nSOFTWARE.\r\n\r\n[vitra]: http://nsmgr8.github.com/vitra/ \"Vitra\"\r\n[Vim]: http://www.vim.org/ \"Vim\"\r\n[Trac]: http://trac.edgewall.org/ \"Trac\"\r\n[Align]: http://www.vim.org/scripts/script.php?script_id=294 \"Align plugin\"\r\n[TWk]: http://www.vim.org/scripts/script.php?script_id=3337 \"Trac wiki syntax\"\r\n[Vundle]: https://github.com/gmarik/vundle \"Vim plugin manager\"\r\n[Pathogen]: http://github.com/tpope/vim-pathogen \"Vim runtime manager\"\r\n[djtkt]: http://dl.dropbox.com/u/125015/vitradjangotickets.png \"Django tickets\"\r\n[djwiki]: http://dl.dropbox.com/u/125015/vitradjangowiki.png \"Django wiki\"\r\n[otherwins]: http://dl.dropbox.com/u/125015/vitraothers.png \"Other windows\"\r\n[vimtrac]: http://www.vim.org/scripts/script.php?script_id=2147\r\n[vimscripts]: http://www.vim.org/scripts/script.php?script_id=4092\r\n[development]: https://github.com/nsmgr8/vitra \"github\"\r\n[issues]: https://github.com/nsmgr8/vitra/issues \"issues, bug reports\"\r\n"}